extern crate rand;
extern crate ed25519_dalek;

use std::borrow::BorrowMut;

use anyhow::{Context, Result};
use rand::rngs::OsRng;
use ed25519_dalek::{Keypair, KEYPAIR_LENGTH};

const KEYPAIRS_ARR: &'static [&'static str] = &[
	"[231,245,166,9,102,99,26,143,237,235,192,8,109,108,251,8,157,124,125,99,200,104,108,30,145,9,145,173,150,81,195,74,236,144,207,19,89,164,72,139,74,47,152,194,150,102,67,194,192,16,101,146,141,249,144,121,49,188,157,46,229,162,89,66]",
	"[189,226,56,204,233,87,211,160,244,145,95,197,217,228,52,0,222,108,204,24,250,17,164,81,86,28,104,238,8,1,80,69,222,44,70,139,45,1,125,62,188,58,34,118,108,51,19,67,196,179,106,126,36,11,126,127,63,239,182,4,198,60,10,110]",
	"[232,84,213,33,174,161,242,11,156,32,106,151,109,241,102,204,24,224,153,137,246,140,32,248,109,153,39,104,116,81,88,105,137,226,166,53,8,50,149,165,252,24,237,58,219,89,183,109,113,58,64,207,195,6,27,165,18,218,106,189,166,221,162,38]",
	"[68,184,168,131,95,219,209,250,234,103,213,52,114,252,247,18,22,179,123,0,218,56,209,40,219,9,71,155,238,216,45,189,209,176,56,40,140,168,225,161,150,64,162,27,104,190,219,79,226,18,60,228,117,55,152,153,235,137,2,21,127,137,29,124]",
	"[23,92,155,253,159,79,61,31,52,69,2,241,30,108,18,243,141,139,96,164,127,211,213,74,18,202,103,89,89,157,9,37,200,111,76,112,191,59,83,114,135,59,88,123,130,39,192,240,96,228,106,55,1,63,81,43,189,7,11,66,72,150,123,123]",
	"[203,48,87,76,205,37,140,165,185,49,101,176,235,253,64,28,44,164,223,123,46,177,178,147,65,247,90,180,36,144,158,30,246,235,175,249,153,246,55,252,39,73,111,46,71,233,208,30,125,156,136,103,95,232,64,244,206,157,228,104,157,121,62,89]",
	"[181,28,64,40,201,74,205,238,110,44,249,44,86,141,144,22,153,136,184,69,25,145,70,47,148,150,241,104,9,93,14,212,214,181,35,71,170,94,231,140,142,98,227,0,46,61,45,129,177,231,233,166,20,14,254,210,39,71,192,91,225,160,210,30]",
	"[232,170,167,222,33,164,10,162,122,63,60,158,172,209,114,200,12,21,60,185,24,119,69,61,44,220,7,48,252,41,23,153,55,232,113,181,84,59,207,76,79,115,22,7,214,3,218,190,180,91,133,227,224,55,22,123,70,63,198,64,161,159,149,24]",
	"[173,59,77,111,86,222,98,98,7,172,27,225,21,211,148,119,182,57,182,242,133,61,97,26,150,98,147,126,65,133,81,236,62,164,69,55,115,131,236,159,69,225,98,247,142,173,229,116,179,20,102,164,37,139,172,108,41,243,16,188,42,192,213,87]",
	"[96,189,37,206,14,176,136,14,120,118,186,179,193,181,72,4,105,162,43,208,215,126,240,45,252,20,112,175,48,136,120,13,48,139,188,184,205,226,186,244,23,81,154,47,7,251,74,196,186,64,56,249,166,152,60,64,251,192,207,239,15,207,173,97]",
];

pub (super) struct Ed25519KeypairJsonProvider {
    keypairs_provided: usize,
}

impl Ed25519KeypairJsonProvider {
    pub fn new() -> Ed25519KeypairJsonProvider {
        return Ed25519KeypairJsonProvider{
            keypairs_provided: 0,
        };
    }

    pub fn provide_keypair_json(&mut self) -> Result<String> {
        let mut csprng = OsRng{};
        let keypair: Keypair = Keypair::generate(csprng.borrow_mut());
        let keypair_bytes: [u8; KEYPAIR_LENGTH] = keypair.to_bytes();
        let keypair_json = serde_json::to_string(&keypair_bytes)
            .context("An error occurred serializing the ED25519 keypair bytes to JSON")?;
        return Ok(keypair_json);

        /*
        let keypairs_provided = self.keypairs_provided;
        if keypairs_provided == KEYPAIRS_ARR.len() {
            return Err(anyhow!(
                "Cannot provide keypair; all keypairs already provided",
            ));
        }
        let json_str = KEYPAIRS_ARR[self.keypairs_provided];
        self.keypairs_provided += 1;
        return Ok(json_str.to_owned());
        */
    }
}